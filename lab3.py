import os
from concurrent.futures import ThreadPoolExecutor
from collections import Counter

def func(x):  # задача для параллелизации, вычисление квадратов чисел
    return x * x

def process_file(file_path):  # функция для анализа текста в файле
    with open(file_path, 'r', encoding='utf-8') as f:  # Открываем файл с поддержкой кириллицы
        data = f.read()
    # Разбиваем текст на слова, учитывая пробелы и переносы строк
    words = data.split()
    # Создаем частотный словарь слов
    freq_dict = Counter(words)
    return freq_dict

# Определяем корневую папку проекта
project_root = os.getcwd()

# Составляем список всех текстовых файлов в корневой папке
files = [os.path.join(project_root, f) for f in os.listdir(project_root) if f.endswith('.txt')]

workers = 5  # количество потоков
numbers = list(range(1, 100))  # числа для вычисления квадратов

# Параллельная обработка чисел
with ThreadPoolExecutor(workers) as pool:
    results = list(pool.map(func, numbers))

print("Squares of numbers:")
print(results)

# Параллельная обработка файлов
with ThreadPoolExecutor(workers) as pool:
    file_results = list(pool.map(process_file, files))

print("\nFrequency dictionaries for files (by words):")
for file, freq_dict in zip(files, file_results):
    print(f"File: {file}")
    print(freq_dict)


"""
Каждая программа на Python — это процесс с одним потоком, называемым основным потоком, который используется для выполнения инструкций вашей программы.
Каждый процесс на самом деле является одним экземпляром интерпретатора Python, который выполняет инструкции Python (байтовый код Python),
что является уровнем чуть ниже, чем код, который вы вводите в свою программу на Python.
Иногда нам может потребоваться создать дополнительные потоки в процессе Python для параллельного выполнения задач.


Пул потоков — это шаблон программирования для автоматического управления пулом рабочих потоков.

Пул отвечает за фиксированное количество потоков.

Он управляет созданием потоков, например, только тогда, когда они нужны.
Он также управляет тем, что должны делать потоки, когда они не используются, например, заставляет их ждать, не потребляя вычислительные ресурсы.

Рабочие потоки предназначены для повторного использования после завершения задачи и обеспечивают защиту от непредвиденного сбоя задачи,
например, при возникновении исключения, не затрагивая сам рабочий поток.

Это отличается от одного потока, который настроен на выполнение одной конкретной задачи.
Пул может предоставлять некоторые возможности для настройки рабочих потоков, например,
запуск функции инициализации и присвоение каждому рабочему потоку имени в соответствии с определённым соглашением об именовании.

Пулы потоков могут предоставлять универсальный интерфейс для выполнения специальных задач с переменным количеством аргументов,
но не требуют, чтобы мы выбирали поток для выполнения задачи, запускали поток или ждали завершения задачи.

Использование пула потоков вместо ручного запуска, управления и закрытия потоков может быть значительно более эффективным, особенно при большом количестве задач.

Python предоставляет пул потоков через класс ThreadPool.

Функция map() соответствует встроенной функции map() и принимает имя функции и итерируемый объект с элементами.
Целевая функция будет вызываться для каждого элемента итерируемого объекта как отдельная задача в пуле потоков.
Если целевая функция возвращает значение, будет возвращён итерируемый объект с результатами.

Жизненный цикл создания и закрытия пула потоков можно упростить с помощью контекстного менеджера, который автоматически закроет ThreadPool.


В жизненном цикле использования класса ThreadPool есть четыре основных этапа: создание, отправка, ожидание и завершение работы.

Создать: Создайте пул потоков, вызвав конструктор ThreadPool().
Отправлять: отправлять задачи синхронно или асинхронно.
2a. Отправляйте задания синхронно
2b. Отправляйте задачи асинхронно
Ждать: ждите и получайте результаты по мере выполнения задач (необязательно).
3a. Дождитесь завершения работы с объектами AsyncResult
3b. Ожидание результата от объектов AsyncResult
Завершение работы: завершите работу пула потоков, вызвав функцию shutdown().
4a. Автоматическое завершение работы с помощью диспетчера контекста

Пул потоков можно настроить, указав аргументы для конструктора класса ThreadPool.

Аргументы конструктора следующие:

процессы: максимальное количество рабочих потоков (не процессов) для использования в пуле.
инициализатор: функция, выполняемая после создания каждого рабочего потока.
initargs: Аргументы функции инициализации рабочих потоков.

Синхронная выдача задач означает, что вызывающая сторона будет заблокирована до завершения выданной задачи или задач.
функция map синхронно выдает задачи
"""